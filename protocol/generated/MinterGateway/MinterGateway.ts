// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BurnExecuted extends ethereum.Event {
  get params(): BurnExecuted__Params {
    return new BurnExecuted__Params(this);
  }
}

export class BurnExecuted__Params {
  _event: BurnExecuted;

  constructor(event: BurnExecuted) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class BurnExecuted1 extends ethereum.Event {
  get params(): BurnExecuted1__Params {
    return new BurnExecuted1__Params(this);
  }
}

export class BurnExecuted1__Params {
  _event: BurnExecuted1;

  constructor(event: BurnExecuted1) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get principalAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get payer(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CollateralUpdated extends ethereum.Event {
  get params(): CollateralUpdated__Params {
    return new CollateralUpdated__Params(this);
  }
}

export class CollateralUpdated__Params {
  _event: CollateralUpdated;

  constructor(event: CollateralUpdated) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalResolvedCollateralRetrieval(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metadataHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class IndexUpdated extends ethereum.Event {
  get params(): IndexUpdated__Params {
    return new IndexUpdated__Params(this);
  }
}

export class IndexUpdated__Params {
  _event: IndexUpdated;

  constructor(event: IndexUpdated) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MintCanceled extends ethereum.Event {
  get params(): MintCanceled__Params {
    return new MintCanceled__Params(this);
  }
}

export class MintCanceled__Params {
  _event: MintCanceled;

  constructor(event: MintCanceled) {
    this._event = event;
  }

  get mintId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get canceller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MintExecuted extends ethereum.Event {
  get params(): MintExecuted__Params {
    return new MintExecuted__Params(this);
  }
}

export class MintExecuted__Params {
  _event: MintExecuted;

  constructor(event: MintExecuted) {
    this._event = event;
  }

  get mintId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get principalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MintProposed extends ethereum.Event {
  get params(): MintProposed__Params {
    return new MintProposed__Params(this);
  }
}

export class MintProposed__Params {
  _event: MintProposed;

  constructor(event: MintProposed) {
    this._event = event;
  }

  get mintId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get destination(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class MinterActivated extends ethereum.Event {
  get params(): MinterActivated__Params {
    return new MinterActivated__Params(this);
  }
}

export class MinterActivated__Params {
  _event: MinterActivated;

  constructor(event: MinterActivated) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MinterDeactivated extends ethereum.Event {
  get params(): MinterDeactivated__Params {
    return new MinterDeactivated__Params(this);
  }
}

export class MinterDeactivated__Params {
  _event: MinterDeactivated;

  constructor(event: MinterDeactivated) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inactiveOwedM(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MinterFrozen extends ethereum.Event {
  get params(): MinterFrozen__Params {
    return new MinterFrozen__Params(this);
  }
}

export class MinterFrozen__Params {
  _event: MinterFrozen;

  constructor(event: MinterFrozen) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get frozenUntil(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MissedIntervalsPenaltyImposed extends ethereum.Event {
  get params(): MissedIntervalsPenaltyImposed__Params {
    return new MissedIntervalsPenaltyImposed__Params(this);
  }
}

export class MissedIntervalsPenaltyImposed__Params {
  _event: MissedIntervalsPenaltyImposed;

  constructor(event: MissedIntervalsPenaltyImposed) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get missedIntervals(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get penaltyAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RetrievalCreated extends ethereum.Event {
  get params(): RetrievalCreated__Params {
    return new RetrievalCreated__Params(this);
  }
}

export class RetrievalCreated__Params {
  _event: RetrievalCreated;

  constructor(event: RetrievalCreated) {
    this._event = event;
  }

  get retrievalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RetrievalResolved extends ethereum.Event {
  get params(): RetrievalResolved__Params {
    return new RetrievalResolved__Params(this);
  }
}

export class RetrievalResolved__Params {
  _event: RetrievalResolved;

  constructor(event: RetrievalResolved) {
    this._event = event;
  }

  get retrievalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UndercollateralizedPenaltyImposed extends ethereum.Event {
  get params(): UndercollateralizedPenaltyImposed__Params {
    return new UndercollateralizedPenaltyImposed__Params(this);
  }
}

export class UndercollateralizedPenaltyImposed__Params {
  _event: UndercollateralizedPenaltyImposed;

  constructor(event: UndercollateralizedPenaltyImposed) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get excessOwedM(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeSpan(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get penaltyAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MinterGateway__burnMResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPrincipalAmount_(): BigInt {
    return this.value0;
  }

  getAmount_(): BigInt {
    return this.value1;
  }
}

export class MinterGateway__burnM1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPrincipalAmount_(): BigInt {
    return this.value0;
  }

  getAmount_(): BigInt {
    return this.value1;
  }
}

export class MinterGateway__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields_(): Bytes {
    return this.value0;
  }

  getName_(): string {
    return this.value1;
  }

  getVersion_(): string {
    return this.value2;
  }

  getChainId_(): BigInt {
    return this.value3;
  }

  getVerifyingContract_(): Address {
    return this.value4;
  }

  getSalt_(): Bytes {
    return this.value5;
  }

  getExtensions_(): Array<BigInt> {
    return this.value6;
  }
}

export class MinterGateway__mintMResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPrincipalAmount_(): BigInt {
    return this.value0;
  }

  getAmount_(): BigInt {
    return this.value1;
  }
}

export class MinterGateway__mintProposalOfResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: Address, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getMintId_(): BigInt {
    return this.value0;
  }

  getCreatedAt_(): BigInt {
    return this.value1;
  }

  getDestination_(): Address {
    return this.value2;
  }

  getAmount_(): BigInt {
    return this.value3;
  }
}

export class MinterGateway extends ethereum.SmartContract {
  static bind(address: Address): MinterGateway {
    return new MinterGateway("MinterGateway", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_MINT_RATIO(): BigInt {
    let result = super.call("MAX_MINT_RATIO", "MAX_MINT_RATIO():(uint32)", []);

    return result[0].toBigInt();
  }

  try_MAX_MINT_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_MINT_RATIO",
      "MAX_MINT_RATIO():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_UPDATE_COLLATERAL_INTERVAL(): BigInt {
    let result = super.call(
      "MIN_UPDATE_COLLATERAL_INTERVAL",
      "MIN_UPDATE_COLLATERAL_INTERVAL():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_UPDATE_COLLATERAL_INTERVAL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_UPDATE_COLLATERAL_INTERVAL",
      "MIN_UPDATE_COLLATERAL_INTERVAL():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE(): i32 {
    let result = super.call("ONE", "ONE():(uint16)", []);

    return result[0].toI32();
  }

  try_ONE(): ethereum.CallResult<i32> {
    let result = super.tryCall("ONE", "ONE():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  UPDATE_COLLATERAL_TYPEHASH(): Bytes {
    let result = super.call(
      "UPDATE_COLLATERAL_TYPEHASH",
      "UPDATE_COLLATERAL_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_UPDATE_COLLATERAL_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UPDATE_COLLATERAL_TYPEHASH",
      "UPDATE_COLLATERAL_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  activeOwedMOf(minter_: Address): BigInt {
    let result = super.call(
      "activeOwedMOf",
      "activeOwedMOf(address):(uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_activeOwedMOf(minter_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeOwedMOf",
      "activeOwedMOf(address):(uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnM(
    minter_: Address,
    maxPrincipalAmount_: BigInt,
    maxAmount_: BigInt,
  ): MinterGateway__burnMResult {
    let result = super.call(
      "burnM",
      "burnM(address,uint256,uint256):(uint112,uint240)",
      [
        ethereum.Value.fromAddress(minter_),
        ethereum.Value.fromUnsignedBigInt(maxPrincipalAmount_),
        ethereum.Value.fromUnsignedBigInt(maxAmount_),
      ],
    );

    return new MinterGateway__burnMResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_burnM(
    minter_: Address,
    maxPrincipalAmount_: BigInt,
    maxAmount_: BigInt,
  ): ethereum.CallResult<MinterGateway__burnMResult> {
    let result = super.tryCall(
      "burnM",
      "burnM(address,uint256,uint256):(uint112,uint240)",
      [
        ethereum.Value.fromAddress(minter_),
        ethereum.Value.fromUnsignedBigInt(maxPrincipalAmount_),
        ethereum.Value.fromUnsignedBigInt(maxAmount_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MinterGateway__burnMResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  burnM1(minter_: Address, maxAmount_: BigInt): MinterGateway__burnM1Result {
    let result = super.call(
      "burnM",
      "burnM(address,uint256):(uint112,uint240)",
      [
        ethereum.Value.fromAddress(minter_),
        ethereum.Value.fromUnsignedBigInt(maxAmount_),
      ],
    );

    return new MinterGateway__burnM1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_burnM1(
    minter_: Address,
    maxAmount_: BigInt,
  ): ethereum.CallResult<MinterGateway__burnM1Result> {
    let result = super.tryCall(
      "burnM",
      "burnM(address,uint256):(uint112,uint240)",
      [
        ethereum.Value.fromAddress(minter_),
        ethereum.Value.fromUnsignedBigInt(maxAmount_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MinterGateway__burnM1Result(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  collateralExpiryTimestampOf(minter_: Address): BigInt {
    let result = super.call(
      "collateralExpiryTimestampOf",
      "collateralExpiryTimestampOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_collateralExpiryTimestampOf(
    minter_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralExpiryTimestampOf",
      "collateralExpiryTimestampOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralOf(minter_: Address): BigInt {
    let result = super.call("collateralOf", "collateralOf(address):(uint240)", [
      ethereum.Value.fromAddress(minter_),
    ]);

    return result[0].toBigInt();
  }

  try_collateralOf(minter_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralOf",
      "collateralOf(address):(uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralPenaltyDeadlineOf(minter_: Address): BigInt {
    let result = super.call(
      "collateralPenaltyDeadlineOf",
      "collateralPenaltyDeadlineOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_collateralPenaltyDeadlineOf(
    minter_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralPenaltyDeadlineOf",
      "collateralPenaltyDeadlineOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralUpdateTimestampOf(minter_: Address): BigInt {
    let result = super.call(
      "collateralUpdateTimestampOf",
      "collateralUpdateTimestampOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_collateralUpdateTimestampOf(
    minter_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralUpdateTimestampOf",
      "collateralUpdateTimestampOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentIndex(): BigInt {
    let result = super.call("currentIndex", "currentIndex():(uint128)", []);

    return result[0].toBigInt();
  }

  try_currentIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentIndex", "currentIndex():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deactivateMinter(minter_: Address): BigInt {
    let result = super.call(
      "deactivateMinter",
      "deactivateMinter(address):(uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_deactivateMinter(minter_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deactivateMinter",
      "deactivateMinter(address):(uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eip712Domain(): MinterGateway__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new MinterGateway__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<MinterGateway__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MinterGateway__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  excessOwedM(): BigInt {
    let result = super.call("excessOwedM", "excessOwedM():(uint240)", []);

    return result[0].toBigInt();
  }

  try_excessOwedM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("excessOwedM", "excessOwedM():(uint240)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  freezeMinter(minter_: Address): BigInt {
    let result = super.call("freezeMinter", "freezeMinter(address):(uint40)", [
      ethereum.Value.fromAddress(minter_),
    ]);

    return result[0].toBigInt();
  }

  try_freezeMinter(minter_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "freezeMinter",
      "freezeMinter(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  frozenUntilOf(minter_: Address): BigInt {
    let result = super.call(
      "frozenUntilOf",
      "frozenUntilOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_frozenUntilOf(minter_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "frozenUntilOf",
      "frozenUntilOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastSignatureTimestamp(minter_: Address, validator_: Address): BigInt {
    let result = super.call(
      "getLastSignatureTimestamp",
      "getLastSignatureTimestamp(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(minter_),
        ethereum.Value.fromAddress(validator_),
      ],
    );

    return result[0].toBigInt();
  }

  try_getLastSignatureTimestamp(
    minter_: Address,
    validator_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastSignatureTimestamp",
      "getLastSignatureTimestamp(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(minter_),
        ethereum.Value.fromAddress(validator_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUpdateCollateralDigest(
    minter_: Address,
    collateral_: BigInt,
    retrievalIds_: Array<BigInt>,
    metadataHash_: Bytes,
    timestamp_: BigInt,
  ): Bytes {
    let result = super.call(
      "getUpdateCollateralDigest",
      "getUpdateCollateralDigest(address,uint256,uint256[],bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(minter_),
        ethereum.Value.fromUnsignedBigInt(collateral_),
        ethereum.Value.fromUnsignedBigIntArray(retrievalIds_),
        ethereum.Value.fromFixedBytes(metadataHash_),
        ethereum.Value.fromUnsignedBigInt(timestamp_),
      ],
    );

    return result[0].toBytes();
  }

  try_getUpdateCollateralDigest(
    minter_: Address,
    collateral_: BigInt,
    retrievalIds_: Array<BigInt>,
    metadataHash_: Bytes,
    timestamp_: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getUpdateCollateralDigest",
      "getUpdateCollateralDigest(address,uint256,uint256[],bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(minter_),
        ethereum.Value.fromUnsignedBigInt(collateral_),
        ethereum.Value.fromUnsignedBigIntArray(retrievalIds_),
        ethereum.Value.fromFixedBytes(metadataHash_),
        ethereum.Value.fromUnsignedBigInt(timestamp_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  inactiveOwedMOf(minter_: Address): BigInt {
    let result = super.call(
      "inactiveOwedMOf",
      "inactiveOwedMOf(address):(uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_inactiveOwedMOf(minter_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inactiveOwedMOf",
      "inactiveOwedMOf(address):(uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActiveMinter(minter_: Address): boolean {
    let result = super.call(
      "isActiveMinter",
      "isActiveMinter(address):(bool)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBoolean();
  }

  try_isActiveMinter(minter_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActiveMinter",
      "isActiveMinter(address):(bool)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDeactivatedMinter(minter_: Address): boolean {
    let result = super.call(
      "isDeactivatedMinter",
      "isDeactivatedMinter(address):(bool)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBoolean();
  }

  try_isDeactivatedMinter(minter_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDeactivatedMinter",
      "isDeactivatedMinter(address):(bool)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFrozenMinter(minter_: Address): boolean {
    let result = super.call(
      "isFrozenMinter",
      "isFrozenMinter(address):(bool)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBoolean();
  }

  try_isFrozenMinter(minter_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isFrozenMinter",
      "isFrozenMinter(address):(bool)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMinterApproved(minter_: Address): boolean {
    let result = super.call(
      "isMinterApproved",
      "isMinterApproved(address):(bool)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBoolean();
  }

  try_isMinterApproved(minter_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMinterApproved",
      "isMinterApproved(address):(bool)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidatorApproved(validator_: Address): boolean {
    let result = super.call(
      "isValidatorApproved",
      "isValidatorApproved(address):(bool)",
      [ethereum.Value.fromAddress(validator_)],
    );

    return result[0].toBoolean();
  }

  try_isValidatorApproved(validator_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidatorApproved",
      "isValidatorApproved(address):(bool)",
      [ethereum.Value.fromAddress(validator_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestIndex(): BigInt {
    let result = super.call("latestIndex", "latestIndex():(uint128)", []);

    return result[0].toBigInt();
  }

  try_latestIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("latestIndex", "latestIndex():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestProposedRetrievalTimestampOf(minter_: Address): BigInt {
    let result = super.call(
      "latestProposedRetrievalTimestampOf",
      "latestProposedRetrievalTimestampOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_latestProposedRetrievalTimestampOf(
    minter_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestProposedRetrievalTimestampOf",
      "latestProposedRetrievalTimestampOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestUpdateTimestamp(): BigInt {
    let result = super.call(
      "latestUpdateTimestamp",
      "latestUpdateTimestamp():(uint40)",
      [],
    );

    return result[0].toBigInt();
  }

  try_latestUpdateTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestUpdateTimestamp",
      "latestUpdateTimestamp():(uint40)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mToken(): Address {
    let result = super.call("mToken", "mToken():(address)", []);

    return result[0].toAddress();
  }

  try_mToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("mToken", "mToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxAllowedActiveOwedMOf(minter_: Address): BigInt {
    let result = super.call(
      "maxAllowedActiveOwedMOf",
      "maxAllowedActiveOwedMOf(address):(uint256)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_maxAllowedActiveOwedMOf(minter_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxAllowedActiveOwedMOf",
      "maxAllowedActiveOwedMOf(address):(uint256)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintDelay(): BigInt {
    let result = super.call("mintDelay", "mintDelay():(uint32)", []);

    return result[0].toBigInt();
  }

  try_mintDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintDelay", "mintDelay():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintM(mintId_: BigInt): MinterGateway__mintMResult {
    let result = super.call("mintM", "mintM(uint256):(uint112,uint240)", [
      ethereum.Value.fromUnsignedBigInt(mintId_),
    ]);

    return new MinterGateway__mintMResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_mintM(mintId_: BigInt): ethereum.CallResult<MinterGateway__mintMResult> {
    let result = super.tryCall("mintM", "mintM(uint256):(uint112,uint240)", [
      ethereum.Value.fromUnsignedBigInt(mintId_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MinterGateway__mintMResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  mintProposalOf(minter_: Address): MinterGateway__mintProposalOfResult {
    let result = super.call(
      "mintProposalOf",
      "mintProposalOf(address):(uint48,uint40,address,uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return new MinterGateway__mintProposalOfResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
    );
  }

  try_mintProposalOf(
    minter_: Address,
  ): ethereum.CallResult<MinterGateway__mintProposalOfResult> {
    let result = super.tryCall(
      "mintProposalOf",
      "mintProposalOf(address):(uint48,uint40,address,uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MinterGateway__mintProposalOfResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
      ),
    );
  }

  mintRatio(): BigInt {
    let result = super.call("mintRatio", "mintRatio():(uint32)", []);

    return result[0].toBigInt();
  }

  try_mintRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintRatio", "mintRatio():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintTTL(): BigInt {
    let result = super.call("mintTTL", "mintTTL():(uint32)", []);

    return result[0].toBigInt();
  }

  try_mintTTL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintTTL", "mintTTL():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minterFreezeTime(): BigInt {
    let result = super.call(
      "minterFreezeTime",
      "minterFreezeTime():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minterFreezeTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minterFreezeTime",
      "minterFreezeTime():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minterRate(): BigInt {
    let result = super.call("minterRate", "minterRate():(uint32)", []);

    return result[0].toBigInt();
  }

  try_minterRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minterRate", "minterRate():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  penalizedUntilOf(minter_: Address): BigInt {
    let result = super.call(
      "penalizedUntilOf",
      "penalizedUntilOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_penalizedUntilOf(minter_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "penalizedUntilOf",
      "penalizedUntilOf(address):(uint40)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  penaltyRate(): BigInt {
    let result = super.call("penaltyRate", "penaltyRate():(uint32)", []);

    return result[0].toBigInt();
  }

  try_penaltyRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("penaltyRate", "penaltyRate():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingCollateralRetrievalOf(minter_: Address, retrievalId_: BigInt): BigInt {
    let result = super.call(
      "pendingCollateralRetrievalOf",
      "pendingCollateralRetrievalOf(address,uint256):(uint240)",
      [
        ethereum.Value.fromAddress(minter_),
        ethereum.Value.fromUnsignedBigInt(retrievalId_),
      ],
    );

    return result[0].toBigInt();
  }

  try_pendingCollateralRetrievalOf(
    minter_: Address,
    retrievalId_: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingCollateralRetrievalOf",
      "pendingCollateralRetrievalOf(address,uint256):(uint240)",
      [
        ethereum.Value.fromAddress(minter_),
        ethereum.Value.fromUnsignedBigInt(retrievalId_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalOfActiveOwedMOf(minter_: Address): BigInt {
    let result = super.call(
      "principalOfActiveOwedMOf",
      "principalOfActiveOwedMOf(address):(uint112)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_principalOfActiveOwedMOf(minter_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalOfActiveOwedMOf",
      "principalOfActiveOwedMOf(address):(uint112)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalOfTotalActiveOwedM(): BigInt {
    let result = super.call(
      "principalOfTotalActiveOwedM",
      "principalOfTotalActiveOwedM():(uint112)",
      [],
    );

    return result[0].toBigInt();
  }

  try_principalOfTotalActiveOwedM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalOfTotalActiveOwedM",
      "principalOfTotalActiveOwedM():(uint112)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposeMint(amount_: BigInt, destination_: Address): BigInt {
    let result = super.call(
      "proposeMint",
      "proposeMint(uint256,address):(uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromAddress(destination_),
      ],
    );

    return result[0].toBigInt();
  }

  try_proposeMint(
    amount_: BigInt,
    destination_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposeMint",
      "proposeMint(uint256,address):(uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(amount_),
        ethereum.Value.fromAddress(destination_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposeRetrieval(collateral_: BigInt): BigInt {
    let result = super.call(
      "proposeRetrieval",
      "proposeRetrieval(uint256):(uint48)",
      [ethereum.Value.fromUnsignedBigInt(collateral_)],
    );

    return result[0].toBigInt();
  }

  try_proposeRetrieval(collateral_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposeRetrieval",
      "proposeRetrieval(uint256):(uint48)",
      [ethereum.Value.fromUnsignedBigInt(collateral_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateModel(): Address {
    let result = super.call("rateModel", "rateModel():(address)", []);

    return result[0].toAddress();
  }

  try_rateModel(): ethereum.CallResult<Address> {
    let result = super.tryCall("rateModel", "rateModel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalActiveOwedM(): BigInt {
    let result = super.call(
      "totalActiveOwedM",
      "totalActiveOwedM():(uint240)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalActiveOwedM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalActiveOwedM",
      "totalActiveOwedM():(uint240)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInactiveOwedM(): BigInt {
    let result = super.call(
      "totalInactiveOwedM",
      "totalInactiveOwedM():(uint240)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalInactiveOwedM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInactiveOwedM",
      "totalInactiveOwedM():(uint240)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalOwedM(): BigInt {
    let result = super.call("totalOwedM", "totalOwedM():(uint240)", []);

    return result[0].toBigInt();
  }

  try_totalOwedM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalOwedM", "totalOwedM():(uint240)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPendingCollateralRetrievalOf(minter_: Address): BigInt {
    let result = super.call(
      "totalPendingCollateralRetrievalOf",
      "totalPendingCollateralRetrievalOf(address):(uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );

    return result[0].toBigInt();
  }

  try_totalPendingCollateralRetrievalOf(
    minter_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPendingCollateralRetrievalOf",
      "totalPendingCollateralRetrievalOf(address):(uint240)",
      [ethereum.Value.fromAddress(minter_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ttgRegistrar(): Address {
    let result = super.call("ttgRegistrar", "ttgRegistrar():(address)", []);

    return result[0].toAddress();
  }

  try_ttgRegistrar(): ethereum.CallResult<Address> {
    let result = super.tryCall("ttgRegistrar", "ttgRegistrar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ttgVault(): Address {
    let result = super.call("ttgVault", "ttgVault():(address)", []);

    return result[0].toAddress();
  }

  try_ttgVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("ttgVault", "ttgVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateCollateral(
    collateral_: BigInt,
    retrievalIds_: Array<BigInt>,
    metadataHash_: Bytes,
    validators_: Array<Address>,
    timestamps_: Array<BigInt>,
    signatures_: Array<Bytes>,
  ): BigInt {
    let result = super.call(
      "updateCollateral",
      "updateCollateral(uint256,uint256[],bytes32,address[],uint256[],bytes[]):(uint40)",
      [
        ethereum.Value.fromUnsignedBigInt(collateral_),
        ethereum.Value.fromUnsignedBigIntArray(retrievalIds_),
        ethereum.Value.fromFixedBytes(metadataHash_),
        ethereum.Value.fromAddressArray(validators_),
        ethereum.Value.fromUnsignedBigIntArray(timestamps_),
        ethereum.Value.fromBytesArray(signatures_),
      ],
    );

    return result[0].toBigInt();
  }

  try_updateCollateral(
    collateral_: BigInt,
    retrievalIds_: Array<BigInt>,
    metadataHash_: Bytes,
    validators_: Array<Address>,
    timestamps_: Array<BigInt>,
    signatures_: Array<Bytes>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateCollateral",
      "updateCollateral(uint256,uint256[],bytes32,address[],uint256[],bytes[]):(uint40)",
      [
        ethereum.Value.fromUnsignedBigInt(collateral_),
        ethereum.Value.fromUnsignedBigIntArray(retrievalIds_),
        ethereum.Value.fromFixedBytes(metadataHash_),
        ethereum.Value.fromAddressArray(validators_),
        ethereum.Value.fromUnsignedBigIntArray(timestamps_),
        ethereum.Value.fromBytesArray(signatures_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateCollateralInterval(): BigInt {
    let result = super.call(
      "updateCollateralInterval",
      "updateCollateralInterval():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_updateCollateralInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateCollateralInterval",
      "updateCollateralInterval():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateCollateralValidatorThreshold(): BigInt {
    let result = super.call(
      "updateCollateralValidatorThreshold",
      "updateCollateralValidatorThreshold():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_updateCollateralValidatorThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateCollateralValidatorThreshold",
      "updateCollateralValidatorThreshold():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateIndex(): BigInt {
    let result = super.call("updateIndex", "updateIndex():(uint128)", []);

    return result[0].toBigInt();
  }

  try_updateIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("updateIndex", "updateIndex():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get ttgRegistrar_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get mToken_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActivateMinterCall extends ethereum.Call {
  get inputs(): ActivateMinterCall__Inputs {
    return new ActivateMinterCall__Inputs(this);
  }

  get outputs(): ActivateMinterCall__Outputs {
    return new ActivateMinterCall__Outputs(this);
  }
}

export class ActivateMinterCall__Inputs {
  _call: ActivateMinterCall;

  constructor(call: ActivateMinterCall) {
    this._call = call;
  }

  get minter_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ActivateMinterCall__Outputs {
  _call: ActivateMinterCall;

  constructor(call: ActivateMinterCall) {
    this._call = call;
  }
}

export class BurnMCall extends ethereum.Call {
  get inputs(): BurnMCall__Inputs {
    return new BurnMCall__Inputs(this);
  }

  get outputs(): BurnMCall__Outputs {
    return new BurnMCall__Outputs(this);
  }
}

export class BurnMCall__Inputs {
  _call: BurnMCall;

  constructor(call: BurnMCall) {
    this._call = call;
  }

  get minter_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxPrincipalAmount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxAmount_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnMCall__Outputs {
  _call: BurnMCall;

  constructor(call: BurnMCall) {
    this._call = call;
  }

  get principalAmount_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class BurnM1Call extends ethereum.Call {
  get inputs(): BurnM1Call__Inputs {
    return new BurnM1Call__Inputs(this);
  }

  get outputs(): BurnM1Call__Outputs {
    return new BurnM1Call__Outputs(this);
  }
}

export class BurnM1Call__Inputs {
  _call: BurnM1Call;

  constructor(call: BurnM1Call) {
    this._call = call;
  }

  get minter_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxAmount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnM1Call__Outputs {
  _call: BurnM1Call;

  constructor(call: BurnM1Call) {
    this._call = call;
  }

  get principalAmount_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CancelMintCall extends ethereum.Call {
  get inputs(): CancelMintCall__Inputs {
    return new CancelMintCall__Inputs(this);
  }

  get outputs(): CancelMintCall__Outputs {
    return new CancelMintCall__Outputs(this);
  }
}

export class CancelMintCall__Inputs {
  _call: CancelMintCall;

  constructor(call: CancelMintCall) {
    this._call = call;
  }

  get minter_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get mintId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelMintCall__Outputs {
  _call: CancelMintCall;

  constructor(call: CancelMintCall) {
    this._call = call;
  }
}

export class DeactivateMinterCall extends ethereum.Call {
  get inputs(): DeactivateMinterCall__Inputs {
    return new DeactivateMinterCall__Inputs(this);
  }

  get outputs(): DeactivateMinterCall__Outputs {
    return new DeactivateMinterCall__Outputs(this);
  }
}

export class DeactivateMinterCall__Inputs {
  _call: DeactivateMinterCall;

  constructor(call: DeactivateMinterCall) {
    this._call = call;
  }

  get minter_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeactivateMinterCall__Outputs {
  _call: DeactivateMinterCall;

  constructor(call: DeactivateMinterCall) {
    this._call = call;
  }

  get inactiveOwedM_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FreezeMinterCall extends ethereum.Call {
  get inputs(): FreezeMinterCall__Inputs {
    return new FreezeMinterCall__Inputs(this);
  }

  get outputs(): FreezeMinterCall__Outputs {
    return new FreezeMinterCall__Outputs(this);
  }
}

export class FreezeMinterCall__Inputs {
  _call: FreezeMinterCall;

  constructor(call: FreezeMinterCall) {
    this._call = call;
  }

  get minter_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FreezeMinterCall__Outputs {
  _call: FreezeMinterCall;

  constructor(call: FreezeMinterCall) {
    this._call = call;
  }

  get frozenUntil_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintMCall extends ethereum.Call {
  get inputs(): MintMCall__Inputs {
    return new MintMCall__Inputs(this);
  }

  get outputs(): MintMCall__Outputs {
    return new MintMCall__Outputs(this);
  }
}

export class MintMCall__Inputs {
  _call: MintMCall;

  constructor(call: MintMCall) {
    this._call = call;
  }

  get mintId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintMCall__Outputs {
  _call: MintMCall;

  constructor(call: MintMCall) {
    this._call = call;
  }

  get principalAmount_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ProposeMintCall extends ethereum.Call {
  get inputs(): ProposeMintCall__Inputs {
    return new ProposeMintCall__Inputs(this);
  }

  get outputs(): ProposeMintCall__Outputs {
    return new ProposeMintCall__Outputs(this);
  }
}

export class ProposeMintCall__Inputs {
  _call: ProposeMintCall;

  constructor(call: ProposeMintCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get destination_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ProposeMintCall__Outputs {
  _call: ProposeMintCall;

  constructor(call: ProposeMintCall) {
    this._call = call;
  }

  get mintId_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ProposeRetrievalCall extends ethereum.Call {
  get inputs(): ProposeRetrievalCall__Inputs {
    return new ProposeRetrievalCall__Inputs(this);
  }

  get outputs(): ProposeRetrievalCall__Outputs {
    return new ProposeRetrievalCall__Outputs(this);
  }
}

export class ProposeRetrievalCall__Inputs {
  _call: ProposeRetrievalCall;

  constructor(call: ProposeRetrievalCall) {
    this._call = call;
  }

  get collateral_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProposeRetrievalCall__Outputs {
  _call: ProposeRetrievalCall;

  constructor(call: ProposeRetrievalCall) {
    this._call = call;
  }

  get retrievalId_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateCollateralCall extends ethereum.Call {
  get inputs(): UpdateCollateralCall__Inputs {
    return new UpdateCollateralCall__Inputs(this);
  }

  get outputs(): UpdateCollateralCall__Outputs {
    return new UpdateCollateralCall__Outputs(this);
  }
}

export class UpdateCollateralCall__Inputs {
  _call: UpdateCollateralCall;

  constructor(call: UpdateCollateralCall) {
    this._call = call;
  }

  get collateral_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get retrievalIds_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get metadataHash_(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get validators_(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get timestamps_(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get signatures_(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }
}

export class UpdateCollateralCall__Outputs {
  _call: UpdateCollateralCall;

  constructor(call: UpdateCollateralCall) {
    this._call = call;
  }

  get minTimestamp_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateIndexCall extends ethereum.Call {
  get inputs(): UpdateIndexCall__Inputs {
    return new UpdateIndexCall__Inputs(this);
  }

  get outputs(): UpdateIndexCall__Outputs {
    return new UpdateIndexCall__Outputs(this);
  }
}

export class UpdateIndexCall__Inputs {
  _call: UpdateIndexCall;

  constructor(call: UpdateIndexCall) {
    this._call = call;
  }
}

export class UpdateIndexCall__Outputs {
  _call: UpdateIndexCall;

  constructor(call: UpdateIndexCall) {
    this._call = call;
  }

  get index_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
