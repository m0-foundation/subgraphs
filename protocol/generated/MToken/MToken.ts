// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuthorizationCanceled extends ethereum.Event {
  get params(): AuthorizationCanceled__Params {
    return new AuthorizationCanceled__Params(this);
  }
}

export class AuthorizationCanceled__Params {
  _event: AuthorizationCanceled;

  constructor(event: AuthorizationCanceled) {
    this._event = event;
  }

  get authorizer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class AuthorizationUsed extends ethereum.Event {
  get params(): AuthorizationUsed__Params {
    return new AuthorizationUsed__Params(this);
  }
}

export class AuthorizationUsed__Params {
  _event: AuthorizationUsed;

  constructor(event: AuthorizationUsed) {
    this._event = event;
  }

  get authorizer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class IndexUpdated extends ethereum.Event {
  get params(): IndexUpdated__Params {
    return new IndexUpdated__Params(this);
  }
}

export class IndexUpdated__Params {
  _event: IndexUpdated;

  constructor(event: IndexUpdated) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StartedEarning extends ethereum.Event {
  get params(): StartedEarning__Params {
    return new StartedEarning__Params(this);
  }
}

export class StartedEarning__Params {
  _event: StartedEarning;

  constructor(event: StartedEarning) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StoppedEarning extends ethereum.Event {
  get params(): StoppedEarning__Params {
    return new StoppedEarning__Params(this);
  }
}

export class StoppedEarning__Params {
  _event: StoppedEarning;

  constructor(event: StoppedEarning) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MToken__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields_(): Bytes {
    return this.value0;
  }

  getName_(): string {
    return this.value1;
  }

  getVersion_(): string {
    return this.value2;
  }

  getChainId_(): BigInt {
    return this.value3;
  }

  getVerifyingContract_(): Address {
    return this.value4;
  }

  getSalt_(): Bytes {
    return this.value5;
  }

  getExtensions_(): Array<BigInt> {
    return this.value6;
  }
}

export class MToken extends ethereum.SmartContract {
  static bind(address: Address): MToken {
    return new MToken("MToken", address);
  }

  CANCEL_AUTHORIZATION_TYPEHASH(): Bytes {
    let result = super.call(
      "CANCEL_AUTHORIZATION_TYPEHASH",
      "CANCEL_AUTHORIZATION_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_CANCEL_AUTHORIZATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CANCEL_AUTHORIZATION_TYPEHASH",
      "CANCEL_AUTHORIZATION_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RECEIVE_WITH_AUTHORIZATION_TYPEHASH(): Bytes {
    let result = super.call(
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH",
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_RECEIVE_WITH_AUTHORIZATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH",
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TRANSFER_WITH_AUTHORIZATION_TYPEHASH(): Bytes {
    let result = super.call(
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_TRANSFER_WITH_AUTHORIZATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(account: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(spender),
      ],
    );

    return result[0].toBigInt();
  }

  try_allowance(
    account: Address,
    spender: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(spender),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender_: Address, amount_: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender_),
      ethereum.Value.fromUnsignedBigInt(amount_),
    ]);

    return result[0].toBoolean();
  }

  try_approve(
    spender_: Address,
    amount_: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender_),
      ethereum.Value.fromUnsignedBigInt(amount_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  authorizationState(authorizer: Address, nonce: Bytes): boolean {
    let result = super.call(
      "authorizationState",
      "authorizationState(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(authorizer),
        ethereum.Value.fromFixedBytes(nonce),
      ],
    );

    return result[0].toBoolean();
  }

  try_authorizationState(
    authorizer: Address,
    nonce: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authorizationState",
      "authorizationState(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(authorizer),
        ethereum.Value.fromFixedBytes(nonce),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account_: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account_),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentIndex(): BigInt {
    let result = super.call("currentIndex", "currentIndex():(uint128)", []);

    return result[0].toBigInt();
  }

  try_currentIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentIndex", "currentIndex():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  earnerRate(): BigInt {
    let result = super.call("earnerRate", "earnerRate():(uint32)", []);

    return result[0].toBigInt();
  }

  try_earnerRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earnerRate", "earnerRate():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eip712Domain(): MToken__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new MToken__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<MToken__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MToken__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  isEarning(account_: Address): boolean {
    let result = super.call("isEarning", "isEarning(address):(bool)", [
      ethereum.Value.fromAddress(account_),
    ]);

    return result[0].toBoolean();
  }

  try_isEarning(account_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isEarning", "isEarning(address):(bool)", [
      ethereum.Value.fromAddress(account_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestIndex(): BigInt {
    let result = super.call("latestIndex", "latestIndex():(uint128)", []);

    return result[0].toBigInt();
  }

  try_latestIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("latestIndex", "latestIndex():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestUpdateTimestamp(): BigInt {
    let result = super.call(
      "latestUpdateTimestamp",
      "latestUpdateTimestamp():(uint40)",
      [],
    );

    return result[0].toBigInt();
  }

  try_latestUpdateTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestUpdateTimestamp",
      "latestUpdateTimestamp():(uint40)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minterGateway(): Address {
    let result = super.call("minterGateway", "minterGateway():(address)", []);

    return result[0].toAddress();
  }

  try_minterGateway(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "minterGateway",
      "minterGateway():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(account: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalBalanceOf(account_: Address): BigInt {
    let result = super.call(
      "principalBalanceOf",
      "principalBalanceOf(address):(uint240)",
      [ethereum.Value.fromAddress(account_)],
    );

    return result[0].toBigInt();
  }

  try_principalBalanceOf(account_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalBalanceOf",
      "principalBalanceOf(address):(uint240)",
      [ethereum.Value.fromAddress(account_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalOfTotalEarningSupply(): BigInt {
    let result = super.call(
      "principalOfTotalEarningSupply",
      "principalOfTotalEarningSupply():(uint112)",
      [],
    );

    return result[0].toBigInt();
  }

  try_principalOfTotalEarningSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalOfTotalEarningSupply",
      "principalOfTotalEarningSupply():(uint112)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateModel(): Address {
    let result = super.call("rateModel", "rateModel():(address)", []);

    return result[0].toAddress();
  }

  try_rateModel(): ethereum.CallResult<Address> {
    let result = super.tryCall("rateModel", "rateModel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalEarningSupply(): BigInt {
    let result = super.call(
      "totalEarningSupply",
      "totalEarningSupply():(uint240)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalEarningSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEarningSupply",
      "totalEarningSupply():(uint240)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalNonEarningSupply(): BigInt {
    let result = super.call(
      "totalNonEarningSupply",
      "totalNonEarningSupply():(uint240)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalNonEarningSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalNonEarningSupply",
      "totalNonEarningSupply():(uint240)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient_: Address, amount_: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient_),
      ethereum.Value.fromUnsignedBigInt(amount_),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient_: Address,
    amount_: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient_),
      ethereum.Value.fromUnsignedBigInt(amount_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(
    sender_: Address,
    recipient_: Address,
    amount_: BigInt,
  ): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender_),
        ethereum.Value.fromAddress(recipient_),
        ethereum.Value.fromUnsignedBigInt(amount_),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender_: Address,
    recipient_: Address,
    amount_: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender_),
        ethereum.Value.fromAddress(recipient_),
        ethereum.Value.fromUnsignedBigInt(amount_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ttgRegistrar(): Address {
    let result = super.call("ttgRegistrar", "ttgRegistrar():(address)", []);

    return result[0].toAddress();
  }

  try_ttgRegistrar(): ethereum.CallResult<Address> {
    let result = super.tryCall("ttgRegistrar", "ttgRegistrar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateIndex(): BigInt {
    let result = super.call("updateIndex", "updateIndex():(uint128)", []);

    return result[0].toBigInt();
  }

  try_updateIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("updateIndex", "updateIndex():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get ttgRegistrar_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minterGateway_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CancelAuthorizationCall extends ethereum.Call {
  get inputs(): CancelAuthorizationCall__Inputs {
    return new CancelAuthorizationCall__Inputs(this);
  }

  get outputs(): CancelAuthorizationCall__Outputs {
    return new CancelAuthorizationCall__Outputs(this);
  }
}

export class CancelAuthorizationCall__Inputs {
  _call: CancelAuthorizationCall;

  constructor(call: CancelAuthorizationCall) {
    this._call = call;
  }

  get authorizer_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce_(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get r_(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get vs_(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CancelAuthorizationCall__Outputs {
  _call: CancelAuthorizationCall;

  constructor(call: CancelAuthorizationCall) {
    this._call = call;
  }
}

export class CancelAuthorization1Call extends ethereum.Call {
  get inputs(): CancelAuthorization1Call__Inputs {
    return new CancelAuthorization1Call__Inputs(this);
  }

  get outputs(): CancelAuthorization1Call__Outputs {
    return new CancelAuthorization1Call__Outputs(this);
  }
}

export class CancelAuthorization1Call__Inputs {
  _call: CancelAuthorization1Call;

  constructor(call: CancelAuthorization1Call) {
    this._call = call;
  }

  get authorizer_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce_(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get v_(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r_(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s_(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CancelAuthorization1Call__Outputs {
  _call: CancelAuthorization1Call;

  constructor(call: CancelAuthorization1Call) {
    this._call = call;
  }
}

export class CancelAuthorization2Call extends ethereum.Call {
  get inputs(): CancelAuthorization2Call__Inputs {
    return new CancelAuthorization2Call__Inputs(this);
  }

  get outputs(): CancelAuthorization2Call__Outputs {
    return new CancelAuthorization2Call__Outputs(this);
  }
}

export class CancelAuthorization2Call__Inputs {
  _call: CancelAuthorization2Call;

  constructor(call: CancelAuthorization2Call) {
    this._call = call;
  }

  get authorizer_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce_(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get signature_(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CancelAuthorization2Call__Outputs {
  _call: CancelAuthorization2Call;

  constructor(call: CancelAuthorization2Call) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get account_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get signature_(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class Permit1Call extends ethereum.Call {
  get inputs(): Permit1Call__Inputs {
    return new Permit1Call__Inputs(this);
  }

  get outputs(): Permit1Call__Outputs {
    return new Permit1Call__Outputs(this);
  }
}

export class Permit1Call__Inputs {
  _call: Permit1Call;

  constructor(call: Permit1Call) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v_(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r_(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s_(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class Permit1Call__Outputs {
  _call: Permit1Call;

  constructor(call: Permit1Call) {
    this._call = call;
  }
}

export class ReceiveWithAuthorizationCall extends ethereum.Call {
  get inputs(): ReceiveWithAuthorizationCall__Inputs {
    return new ReceiveWithAuthorizationCall__Inputs(this);
  }

  get outputs(): ReceiveWithAuthorizationCall__Outputs {
    return new ReceiveWithAuthorizationCall__Outputs(this);
  }
}

export class ReceiveWithAuthorizationCall__Inputs {
  _call: ReceiveWithAuthorizationCall;

  constructor(call: ReceiveWithAuthorizationCall) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validAfter_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get validBefore_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nonce_(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get signature_(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class ReceiveWithAuthorizationCall__Outputs {
  _call: ReceiveWithAuthorizationCall;

  constructor(call: ReceiveWithAuthorizationCall) {
    this._call = call;
  }
}

export class ReceiveWithAuthorization1Call extends ethereum.Call {
  get inputs(): ReceiveWithAuthorization1Call__Inputs {
    return new ReceiveWithAuthorization1Call__Inputs(this);
  }

  get outputs(): ReceiveWithAuthorization1Call__Outputs {
    return new ReceiveWithAuthorization1Call__Outputs(this);
  }
}

export class ReceiveWithAuthorization1Call__Inputs {
  _call: ReceiveWithAuthorization1Call;

  constructor(call: ReceiveWithAuthorization1Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validAfter_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get validBefore_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nonce_(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get r_(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get vs_(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class ReceiveWithAuthorization1Call__Outputs {
  _call: ReceiveWithAuthorization1Call;

  constructor(call: ReceiveWithAuthorization1Call) {
    this._call = call;
  }
}

export class ReceiveWithAuthorization2Call extends ethereum.Call {
  get inputs(): ReceiveWithAuthorization2Call__Inputs {
    return new ReceiveWithAuthorization2Call__Inputs(this);
  }

  get outputs(): ReceiveWithAuthorization2Call__Outputs {
    return new ReceiveWithAuthorization2Call__Outputs(this);
  }
}

export class ReceiveWithAuthorization2Call__Inputs {
  _call: ReceiveWithAuthorization2Call;

  constructor(call: ReceiveWithAuthorization2Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validAfter_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get validBefore_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nonce_(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get v_(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r_(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s_(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class ReceiveWithAuthorization2Call__Outputs {
  _call: ReceiveWithAuthorization2Call;

  constructor(call: ReceiveWithAuthorization2Call) {
    this._call = call;
  }
}

export class StartEarningCall extends ethereum.Call {
  get inputs(): StartEarningCall__Inputs {
    return new StartEarningCall__Inputs(this);
  }

  get outputs(): StartEarningCall__Outputs {
    return new StartEarningCall__Outputs(this);
  }
}

export class StartEarningCall__Inputs {
  _call: StartEarningCall;

  constructor(call: StartEarningCall) {
    this._call = call;
  }
}

export class StartEarningCall__Outputs {
  _call: StartEarningCall;

  constructor(call: StartEarningCall) {
    this._call = call;
  }
}

export class StopEarningCall extends ethereum.Call {
  get inputs(): StopEarningCall__Inputs {
    return new StopEarningCall__Inputs(this);
  }

  get outputs(): StopEarningCall__Outputs {
    return new StopEarningCall__Outputs(this);
  }
}

export class StopEarningCall__Inputs {
  _call: StopEarningCall;

  constructor(call: StopEarningCall) {
    this._call = call;
  }

  get account_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class StopEarningCall__Outputs {
  _call: StopEarningCall;

  constructor(call: StopEarningCall) {
    this._call = call;
  }
}

export class StopEarning1Call extends ethereum.Call {
  get inputs(): StopEarning1Call__Inputs {
    return new StopEarning1Call__Inputs(this);
  }

  get outputs(): StopEarning1Call__Outputs {
    return new StopEarning1Call__Outputs(this);
  }
}

export class StopEarning1Call__Inputs {
  _call: StopEarning1Call;

  constructor(call: StopEarning1Call) {
    this._call = call;
  }
}

export class StopEarning1Call__Outputs {
  _call: StopEarning1Call;

  constructor(call: StopEarning1Call) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferWithAuthorizationCall extends ethereum.Call {
  get inputs(): TransferWithAuthorizationCall__Inputs {
    return new TransferWithAuthorizationCall__Inputs(this);
  }

  get outputs(): TransferWithAuthorizationCall__Outputs {
    return new TransferWithAuthorizationCall__Outputs(this);
  }
}

export class TransferWithAuthorizationCall__Inputs {
  _call: TransferWithAuthorizationCall;

  constructor(call: TransferWithAuthorizationCall) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validAfter_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get validBefore_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nonce_(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get r_(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get vs_(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class TransferWithAuthorizationCall__Outputs {
  _call: TransferWithAuthorizationCall;

  constructor(call: TransferWithAuthorizationCall) {
    this._call = call;
  }
}

export class TransferWithAuthorization1Call extends ethereum.Call {
  get inputs(): TransferWithAuthorization1Call__Inputs {
    return new TransferWithAuthorization1Call__Inputs(this);
  }

  get outputs(): TransferWithAuthorization1Call__Outputs {
    return new TransferWithAuthorization1Call__Outputs(this);
  }
}

export class TransferWithAuthorization1Call__Inputs {
  _call: TransferWithAuthorization1Call;

  constructor(call: TransferWithAuthorization1Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validAfter_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get validBefore_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nonce_(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get signature_(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class TransferWithAuthorization1Call__Outputs {
  _call: TransferWithAuthorization1Call;

  constructor(call: TransferWithAuthorization1Call) {
    this._call = call;
  }
}

export class TransferWithAuthorization2Call extends ethereum.Call {
  get inputs(): TransferWithAuthorization2Call__Inputs {
    return new TransferWithAuthorization2Call__Inputs(this);
  }

  get outputs(): TransferWithAuthorization2Call__Outputs {
    return new TransferWithAuthorization2Call__Outputs(this);
  }
}

export class TransferWithAuthorization2Call__Inputs {
  _call: TransferWithAuthorization2Call;

  constructor(call: TransferWithAuthorization2Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validAfter_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get validBefore_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nonce_(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get v_(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r_(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s_(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class TransferWithAuthorization2Call__Outputs {
  _call: TransferWithAuthorization2Call;

  constructor(call: TransferWithAuthorization2Call) {
    this._call = call;
  }
}

export class UpdateIndexCall extends ethereum.Call {
  get inputs(): UpdateIndexCall__Inputs {
    return new UpdateIndexCall__Inputs(this);
  }

  get outputs(): UpdateIndexCall__Outputs {
    return new UpdateIndexCall__Outputs(this);
  }
}

export class UpdateIndexCall__Inputs {
  _call: UpdateIndexCall;

  constructor(call: UpdateIndexCall) {
    this._call = call;
  }
}

export class UpdateIndexCall__Outputs {
  _call: UpdateIndexCall;

  constructor(call: UpdateIndexCall) {
    this._call = call;
  }

  get currentIndex_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
