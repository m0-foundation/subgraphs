#
# MinterGateway events
#
type BurnExecuted @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  principalAmount: BigInt # uint112
  amount: BigInt! # uint240
  payer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollateralUpdated @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  collateral: BigInt! # uint240
  totalResolvedCollateralRetrieval: BigInt! # uint240
  metadataHash: Bytes! # bytes32
  timestamp: BigInt! # uint40
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IndexUpdated @entity(immutable: true) {
  id: Bytes!
  index: BigInt! # uint128
  rate: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MintCanceled @entity(immutable: true) {
  id: Bytes!
  mintId: BigInt! # uint48
  minter: Bytes! # address
  canceller: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MintExecuted @entity(immutable: true) {
  id: Bytes!
  mintId: BigInt! # uint48
  minter: Bytes! # address
  principalAmount: BigInt! # uint112
  amount: BigInt! # uint240
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MintProposed @entity(immutable: true) {
  id: Bytes!
  mintId: BigInt! # uint48
  minter: Bytes! # address
  amount: BigInt! # uint240
  destination: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinterActivated @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  caller: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinterDeactivated @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  inactiveOwedM: BigInt! # uint240
  caller: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinterFrozen @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  frozenUntil: BigInt! # uint40
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MissedIntervalsPenaltyImposed @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  missedIntervals: BigInt! # uint40
  penaltyAmount: BigInt! # uint240
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RetrievalCreated @entity(immutable: true) {
  id: Bytes!
  retrievalId: BigInt! # uint48
  minter: Bytes! # address
  amount: BigInt! # uint240
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RetrievalResolved @entity(immutable: true) {
  id: Bytes!
  retrievalId: BigInt! # uint48
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UndercollateralizedPenaltyImposed @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  excessOwedM: BigInt! # uint240
  timeSpan: BigInt! # uint40
  penaltyAmount: BigInt! # uint240
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
#
# MinterGateway - NON events entities - timeseries - updated by handleNewBlock
#
type PrincipalOfTotalActiveOwedM @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type TotalOwedM @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type TotalActiveOwedM @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type TotalActiveOwedMDailySnapshot @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  dayTimestamp: BigInt!
}

type TotalInactiveOwedM @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

# The difference between total owed M and M token total supply.
type TotalExcessOwedM @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}
#
# Minter Entitites
#
type MinterActiveOwedMOf @entity(immutable: true) {
  id: String!
  minter: Bytes! # address
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type MinterInactiveOwedMOf @entity(immutable: true) {
  id: String!
  minter: Bytes! # address
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type MinterPrincipalOfActiveOwedMOf @entity(immutable: true) {
  id: String!
  minter: Bytes! # address
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type MinterCollateralOf @entity(immutable: true) {
  id: String!
  minter: Bytes! # address
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}
#
# M token special events
#
type MTokenAuthorizationCanceled @entity(immutable: true) {
  id: Bytes!
  authorizer: Bytes! # address
  nonce: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MTokenAuthorizationUsed @entity(immutable: true) {
  id: Bytes!
  authorizer: Bytes! # address
  nonce: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MTokenIndexUpdated @entity(immutable: true) {
  id: Bytes!
  index: BigInt! # uint128
  rate: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MTokenStartedEarning @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MTokenStoppedEarning @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
