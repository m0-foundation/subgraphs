# Script usage

The script in this folder expects this subgraph to be deployed and uses its data to compute accrued yield for a given earner.

```bash
$ node ./scripts/periodic-yield.js <ADDRESS> <LATEST_EOD_TIMESTAMP> <PERIODS> <SECONDS_PER_PERIOD>
```

- `ADDRESS` is a case-insensitive M holder address
- `LATEST_EOD_TIMESTAMP` is the Unix/block timestamp that demarcates the end of the most recent period
- `PERIODS` is the number of recent periods to return earned yield values for
- `SECONDS_PER_PERIOD` defines how long a period is in seconds

## How to compute accrued yield using this indexer

You can find a script in the `script` folder which contains the logic to compute periodic yields. This section will guide how to run it.

Notice that this Indexer is meant for our Spoke networks. We don't push rate information to spoke networks on `IndexUpdates`. The script gets the rate information from the `stateful-m-token` subgraph.

You'll need to deploy both subgraphs to use it. Alternatively, you can hardcode the rate value if all you need is the total accrued yield (check the second example below).

1. Set env vars

   ```sh
   cp .env.example .env
   ```

1. Run the script

   Example: Daily yields of [Noble (USDN)](https://dashboard.m0.org/stablecoins/noble) from 3 May 2025 to 19 Aug 2026.

   ```sh
   yarn run:script \
       0x83Ae82Bd4054e815fB7B189C39D9CE670369ea16 \
       1755618977 \
       169 \
       86400
   ```

   Example: Total accrued yield for [Noble (USDN)](https://dashboard.m0.org/stablecoins/noble) until 19 Aug 2026.

   ```sh
   yarn run:script \
       0x83Ae82Bd4054e815fB7B189C39D9CE670369ea16 \
       1755618977 \
       1 \
       14640977
   ```
